{"ast":null,"code":"var _jsxFileName = \"/Users/adamazizi/Desktop/nicehellohi/Cell-Growth-Simulation/src/components/Grid/Grid.tsx\";\nimport React from 'react';\nimport Cell from '../Cell/Cell';\nimport './Grid.css';\nimport { CellType } from '../../utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  grid,\n  toggleCell\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        isAlive: cell === CellType.Alive,\n        onClick: () => toggleCell(rowIndex, colIndex)\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","Cell","CellType","jsxDEV","_jsxDEV","Grid","grid","toggleCell","className","children","map","row","rowIndex","cell","colIndex","isAlive","Alive","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adamazizi/Desktop/nicehellohi/Cell-Growth-Simulation/src/components/Grid/Grid.tsx"],"sourcesContent":["import React from 'react';\nimport Cell from '../Cell/Cell';\nimport './Grid.css'\nimport { CellType } from '../../utils/utils';\n\ninterface GridProps {\n    grid: CellType[][];\n    toggleCell: (row: number, col: number) => void;\n}\n\nconst Grid: React.FC<GridProps> = ({ grid, toggleCell }) => {\n    return (\n        <div className=\"grid\">\n            {grid.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"row\">\n                    {row.map((cell, colIndex) => (\n                        <Cell\n                            key={`${rowIndex}-${colIndex}`}\n                            isAlive={cell === CellType.Alive}\n                            onClick={() => toggleCell(rowIndex, colIndex)}\n                        />\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Grid;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAO,YAAY;AACnB,SAASC,QAAQ,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO7C,MAAMC,IAAyB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EACxD,oBACIH,OAAA;IAAKI,SAAS,EAAC,MAAM;IAAAC,QAAA,EAChBH,IAAI,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACpBR,OAAA;MAAoBI,SAAS,EAAC,KAAK;MAAAC,QAAA,EAC9BE,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,kBACpBV,OAAA,CAACH,IAAI;QAEDc,OAAO,EAAEF,IAAI,KAAKX,QAAQ,CAACc,KAAM;QACjCC,OAAO,EAAEA,CAAA,KAAMV,UAAU,CAACK,QAAQ,EAAEE,QAAQ;MAAE,GAFzC,GAAGF,QAAQ,IAAIE,QAAQ,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGjC,CACJ;IAAC,GAPIT,QAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACC,EAAA,GAhBIjB,IAAyB;AAkB/B,eAAeA,IAAI;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}