{"ast":null,"code":"var _jsxFileName = \"/Users/adamazizi/Desktop/nicehellohi/Cell-Growth-Simulation/src/components/Graph/Graph.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  data,\n  width = 600,\n  height = 400\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (ctx) {\n      // Clear canvas\n      ctx.clearRect(0, 0, width, height);\n\n      // Draw axes\n      ctx.beginPath();\n      ctx.moveTo(50, 10);\n      ctx.lineTo(50, height - 30);\n      ctx.lineTo(width - 10, height - 30);\n      ctx.stroke();\n\n      // Draw labels\n      ctx.font = '12px Arial';\n      const xAxisTitle = 'Time (seconds)';\n      const xAxisTitleWidth = ctx.measureText(xAxisTitle).width;\n      ctx.fillText(xAxisTitle, width / 2 - xAxisTitleWidth / 2, height - 3);\n      const yAxisTitle = 'Number of Bacteria';\n      const yAxisTitleWidth = ctx.measureText(yAxisTitle).width;\n      ctx.save();\n      ctx.translate(20, height / 2);\n      ctx.rotate(-Math.PI / 2);\n      ctx.fillText(yAxisTitle, -yAxisTitleWidth / 2, -11);\n      ctx.restore();\n      if (data.length === 0) {\n        // Draw graph title\n        ctx.font = 'bold 16px Arial';\n        const graphTitle = 'Bacterial Growth Over Time';\n        const graphTitleWidth = ctx.measureText(graphTitle).width;\n        ctx.fillText(graphTitle, width / 2 - graphTitleWidth / 2, 20);\n      } else {\n        // Plot the data points\n        ctx.beginPath();\n        ctx.moveTo(50, height - 30 - data[0].count);\n        data.forEach((point, index) => {\n          const x = 50 + index * (width - 60) / data.length;\n          const y = height - 30 - point.count * (height - 60) / Math.max(...data.map(d => d.count), 1);\n          ctx.lineTo(x, y);\n        });\n        ctx.stroke();\n\n        // tick marks and values on x-axis\n        ctx.beginPath();\n        data.forEach((point, index) => {\n          const x = 50 + index * (width - 60) / data.length;\n          const y = height - 28;\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, y + 5);\n          ctx.fillText(`${point.time}`, x - 5, y + 15);\n        });\n        ctx.stroke();\n\n        // tick marks and values on y-axis\n        ctx.beginPath();\n        const maxBacteria = Math.max(...data.map(d => d.count), 1);\n        for (let i = 0; i <= 10; i++) {\n          const y = height - 30 - i * (height - 60) / 10;\n          ctx.moveTo(48, y);\n          ctx.lineTo(52, y);\n          ctx.fillText(`${Math.round(i * maxBacteria / 10)}`, 20, y + 5);\n        }\n        ctx.stroke();\n\n        // Draw graph title\n        ctx.font = 'bold 16px Arial';\n        const graphTitle = 'Bacterial Growth Over Time';\n        const graphTitleWidth = ctx.measureText(graphTitle).width;\n        ctx.fillText(graphTitle, width / 2 - graphTitleWidth / 2, 20);\n      }\n    }\n  }, [data, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n_s(Graph, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Graph","data","width","height","_s","canvasRef","canvas","current","ctx","getContext","clearRect","beginPath","moveTo","lineTo","stroke","font","xAxisTitle","xAxisTitleWidth","measureText","fillText","yAxisTitle","yAxisTitleWidth","save","translate","rotate","Math","PI","restore","length","graphTitle","graphTitleWidth","count","forEach","point","index","x","y","max","map","d","time","maxBacteria","i","round","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adamazizi/Desktop/nicehellohi/Cell-Growth-Simulation/src/components/Graph/Graph.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\ninterface GraphProps {\n  data: { time: number; count: number }[];\n  width?: number;\n  height?: number;\n}\n\nconst Graph: React.FC<GraphProps> = ({ data, width = 600, height = 400 }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n  \n    if (ctx) {\n      // Clear canvas\n      ctx.clearRect(0, 0, width, height);\n  \n      // Draw axes\n      ctx.beginPath();\n      ctx.moveTo(50, 10); \n      ctx.lineTo(50, height - 30);\n      ctx.lineTo(width - 10, height - 30);\n      ctx.stroke();\n  \n      // Draw labels\n      ctx.font = '12px Arial';\n  \n      const xAxisTitle = 'Time (seconds)';\n      const xAxisTitleWidth = ctx.measureText(xAxisTitle).width;\n      ctx.fillText(xAxisTitle, width / 2 - xAxisTitleWidth / 2, height -3);\n  \n      const yAxisTitle = 'Number of Bacteria';\n      const yAxisTitleWidth = ctx.measureText(yAxisTitle).width;\n      ctx.save();\n      ctx.translate(20, height / 2);\n      ctx.rotate(-Math.PI / 2);\n      ctx.fillText(yAxisTitle, -yAxisTitleWidth / 2, -11);\n      ctx.restore();\n  \n      if (data.length === 0) {\n        // Draw graph title\n        ctx.font = 'bold 16px Arial';\n        const graphTitle = 'Bacterial Growth Over Time';\n        const graphTitleWidth = ctx.measureText(graphTitle).width;\n        ctx.fillText(graphTitle, width / 2 - graphTitleWidth / 2, 20);\n      } else {\n        // Plot the data points\n        ctx.beginPath();\n        ctx.moveTo(50, height - 30 - data[0].count);\n        data.forEach((point, index) => {\n          const x = 50 + (index * (width - 60) / data.length);\n          const y = height - 30 - (point.count * (height - 60) / Math.max(...data.map(d => d.count), 1));\n          ctx.lineTo(x, y);\n        });\n        ctx.stroke();\n  \n        // tick marks and values on x-axis\n        ctx.beginPath();\n        data.forEach((point, index) => {\n          const x = 50 + (index * (width - 60) / data.length);\n          const y = height - 28;\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, y + 5);\n          ctx.fillText(`${point.time}`, x - 5, y + 15);\n        });\n        ctx.stroke();\n  \n        // tick marks and values on y-axis\n        ctx.beginPath();\n        const maxBacteria = Math.max(...data.map(d => d.count), 1);\n        for (let i = 0; i <= 10; i++) {\n          const y = height - 30 - (i * (height - 60) / 10);\n          ctx.moveTo(48, y);\n          ctx.lineTo(52, y);\n          ctx.fillText(`${Math.round(i * maxBacteria / 10)}`, 20, y + 5);\n        }\n        ctx.stroke();\n  \n        // Draw graph title\n        ctx.font = 'bold 16px Arial';\n        const graphTitle = 'Bacterial Growth Over Time';\n        const graphTitleWidth = ctx.measureText(graphTitle).width;\n        ctx.fillText(graphTitle, width / 2 - graphTitleWidth / 2, 20);\n      }\n    }\n  }, [data, width, height]);\n  \n\n  return <canvas ref={canvasRef} width={width} height={height}></canvas>;\n};\n\nexport default Graph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}